#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('gib:server');
var http = require('http');
var MongoClient = require('mongodb').MongoClient;
var db = {url: "mongodb://gib:qwerty@ds245805.mlab.com:45805/heroku_dt4zfk5h"}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '1337');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);


var getMessages = function(data, socket){
  MongoClient.connect(db.url, (err, db) => {
    if (err) return console.log(err)
    db.collection('messages', function (err, collection) {
          collection.find({repo: data.repo, chat: data.chat}).toArray(function(err, items) {
              if(err) throw err; 
              io.sockets.emit(items[0].chat, items);           
          });
        
      });         
   })
}
io.on('connection', function (socket) { 

  socket.on('getMessages', function(data){
    MongoClient.connect(db.url, (err, db) => {
    if (err) return console.log(err)
    db.collection('messages', function (err, collection) {
          collection.find({repo: data.repo, chat: data.chat}).toArray(function(err, items) {
              if(err) throw err; 
              io.sockets.emit("messagesList", items);           
          });
        
      });         
   })
  });

  socket.on('newMessage', function(message){ 
    MongoClient.connect(db.url, (err, db) => {
    if (err) return console.log(err)
    db.collection('messages').insertOne( {
        "chat": message.chat,
        "repo": message.repo,
        "user": message.user,
        "text": message.text
      }, function(err, result) {
        console.log("New message: " + message.user + ": " + message.text + " to repo: " + message.repo + " to chat: " + message.chat);
      if(err){
        res.send(err)
      }
      else{
        getMessages({repo: message.repo, chat: message.chat}, socket)
        console.log({repo: message.repo, chat: message.chat})
      }
      });        
    })
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
